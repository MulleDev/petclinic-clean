const axios = require('axios');

/**
 * Vereinfachter JIRA Reporter für Playwright Tests
 * Funktioniert mit dem PET Projekt in JIRA
 */
class JiraReporter {
  constructor() {
    this.jiraBaseUrl = 'http://localhost:3000'; // MCP-JIRA Server
    this.results = {
      passed: [],
      failed: [],
      skipped: [],
      flaky: []
    };
    this.startTime = null;
    this.endTime = null;
  }

  onBegin(config, suite) {
    this.startTime = new Date();
    console.log(`📊 Starting Playwright test suite with JIRA integration...`);
  }

  onTestEnd(test, result) {
    const testInfo = {
      title: test.title,
      file: test.location?.file || 'unknown',
      line: test.location?.line || 0,
      duration: result.duration,
      status: result.status,
      error: result.error,
      retry: result.retry
    };

    switch (result.status) {
      case 'passed':
        this.results.passed.push(testInfo);
        break;
      case 'failed':
        this.results.failed.push(testInfo);
        break;
      case 'skipped':
        this.results.skipped.push(testInfo);
        break;
      case 'timedOut':
        testInfo.error = { message: 'Test timed out' };
        this.results.failed.push(testInfo);
        break;
    }

    // Check for flaky tests (retry > 0 but passed)
    if (result.retry > 0 && result.status === 'passed') {
      this.results.flaky.push(testInfo);
    }
  }

  async onEnd(result) {
    this.endTime = new Date();
    const duration = this.endTime - this.startTime;

    console.log(`📋 Test execution completed. Creating JIRA reports...`);

    try {
      // Einfacher Test Report ohne Template
      await this.createSimpleReport(result, duration);

      // Nur bei wirklichen Failures, nicht bei Demo
      if (this.results.failed.length > 0) {
        console.log(`🐛 Found ${this.results.failed.length} failed tests, creating tickets...`);
        for (const failedTest of this.results.failed) {
          await this.createFailureReport(failedTest);
        }
      }

      console.log(`✅ JIRA integration completed successfully`);
    } catch (error) {
      console.error(`❌ JIRA integration failed:`, error.message);
      // Don't fail the test run because of JIRA issues
    }
  }

  async createSimpleReport(result, duration) {
    const total = this.results.passed.length + this.results.failed.length + this.results.skipped.length;
    const passRate = total > 0 ? ((this.results.passed.length / total) * 100).toFixed(1) : 0;

    const reportData = {
      summary: `Playwright Test Report - ${this.formatDate(this.startTime)}`,
      description: `**📊 Playwright Test Suite Execution Report**

**Execution Summary:**
- Total Tests: ${total}
- Passed: ${this.results.passed.length}
- Failed: ${this.results.failed.length}
- Skipped: ${this.results.skipped.length}
- Pass Rate: ${passRate}%
- Execution Time: ${this.formatDuration(duration)}

**Test Details:**
${this.getTestDetails()}

**Environment:**
- Browser: ${this.getBrowserInfo()}
- Execution Date: ${this.formatDate(this.startTime)}

*Generated by Playwright JIRA Reporter*`,
      projectKey: 'PET',  // Verwende das existierende PET Projekt
      issueType: 'Task',
      priority: 'Medium'
    };

    const response = await axios.post(`${this.jiraBaseUrl}/jira/create-ticket`, reportData);
    console.log(`📊 Test report created successfully!`);
    if (response.data.ticket?.key) {
      console.log(`🎫 JIRA Ticket: ${response.data.ticket.key}`);
    }
    return response.data;
  }

  async createFailureReport(testInfo) {
    const reportData = {
      summary: `Test Failure: ${testInfo.title}`,
      description: `**🐛 Test Failure Report**

**Test Information:**
- Test Name: ${testInfo.title}
- File: ${testInfo.file}
- Line: ${testInfo.line}
- Execution Time: ${this.formatDuration(testInfo.duration)}

**Error Details:**
\`\`\`
${testInfo.error || 'No error message available'}
\`\`\`

**Environment:**
- Browser: ${this.getBrowserInfo()}
- Execution Date: ${this.formatDate(new Date())}

**Reproduction Steps:**
1. Run: \`npx playwright test ${testInfo.file}\`
2. Review error output
3. Fix issue and rerun

*Auto-generated by Playwright JIRA Reporter*`,
      projectKey: 'PET',  // Verwende das existierende PET Projekt
      issueType: 'Bug',
      priority: 'High'
    };

    const response = await axios.post(`${this.jiraBaseUrl}/jira/create-ticket`, reportData);
    console.log(`🐛 Test failure ticket created for "${testInfo.title}"`);
    return response.data;
  }

  getTestDetails() {
    let details = '';
    
    if (this.results.passed.length > 0) {
      details += `**✅ Passed Tests (${this.results.passed.length}):**\n`;
      this.results.passed.forEach(test => {
        details += `- ${test.title} (${this.formatDuration(test.duration)})\n`;
      });
      details += '\n';
    }

    if (this.results.failed.length > 0) {
      details += `**❌ Failed Tests (${this.results.failed.length}):**\n`;
      this.results.failed.forEach(test => {
        details += `- ${test.title}: ${test.error || 'Unknown error'}\n`;
      });
      details += '\n';
    }

    if (this.results.skipped.length > 0) {
      details += `**⏭️ Skipped Tests (${this.results.skipped.length}):**\n`;
      this.results.skipped.forEach(test => {
        details += `- ${test.title}\n`;
      });
      details += '\n';
    }

    return details || 'No detailed test information available.';
  }

  getBrowserInfo() {
    return process.env.PLAYWRIGHT_BROWSER || 'chromium';
  }

  formatDuration(ms) {
    if (ms < 1000) return `${ms}ms`;
    if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;
    return `${Math.floor(ms / 60000)}m ${Math.floor((ms % 60000) / 1000)}s`;
  }

  formatDate(date) {
    return date.toISOString().split('T')[0] + ' ' + 
           date.toTimeString().split(' ')[0];
  }
}

module.exports = JiraReporter;
